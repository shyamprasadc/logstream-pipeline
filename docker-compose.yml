version: "3.9"

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-logs}
      POSTGRES_USER: ${POSTGRES_USER:-loguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-logpass}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-loguser} -d ${POSTGRES_DB:-logs}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  kafka:
    image: bitnami/kafka:3.7
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server kafka:9092 --list | cat",
        ]
      interval: 10s
      timeout: 5s
      retries: 20

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data

  create-bucket:
    image: minio/mc:RELEASE.2024-06-13T21-45-59Z
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "mc alias set local http://minio:9000 ${S3_ACCESS_KEY:-minioadmin} ${S3_SECRET_KEY:-minioadmin} && 
      mc mb -p local/${S3_BUCKET:-log-archive} || true"

  api:
    build: .
    environment:
      ENV: local
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-logs}
      POSTGRES_USER: ${POSTGRES_USER:-loguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-logpass}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: ${KAFKA_TOPIC:-webserver-logs}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID:-log-consumer-group}
      S3_ENDPOINT_URL: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET:-log-archive}
      S3_USE_SSL: "false"
      SAMPLE_LOG_PATH: /data/sample_logs/access.log
    command: uvicorn api.main:app --host ${API_HOST:-0.0.0.0} --port ${API_PORT:-8000}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    volumes:
      - ./:/app
      - ./sample_data:/data

  consumer:
    build: .
    environment:
      ENV: local
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-logs}
      POSTGRES_USER: ${POSTGRES_USER:-loguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-logpass}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: ${KAFKA_TOPIC:-webserver-logs}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID:-log-consumer-group}
      S3_ENDPOINT_URL: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET:-log-archive}
      S3_USE_SSL: "false"
      CONSUMER_S3_BATCH_SIZE: ${CONSUMER_S3_BATCH_SIZE:-500}
      CONSUMER_S3_BATCH_SECONDS: ${CONSUMER_S3_BATCH_SECONDS:-30}
    command: python -m services.stream_consumer
    depends_on:
      - postgres
      - kafka
      - minio
    ports:
      - "8001:8001"
    volumes:
      - ./:/app
      - ./sample_data:/data

  airflow:
    image: apache/airflow:2.9.3
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__FERNET_KEY: __fernet_key__
      PYTHONPATH: /app
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-logs}
      POSTGRES_USER: ${POSTGRES_USER:-loguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-logpass}
      S3_ENDPOINT_URL: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET:-log-archive}
      S3_USE_SSL: "false"
      SAMPLE_LOG_PATH: /data/sample_logs/access.log
    command: bash -lc "pip install --no-cache-dir -r /app/requirements.txt && airflow db init && airflow users create --username admin --password admin --firstname a --lastname b --role Admin --email admin@example.com || true && airflow scheduler & airflow webserver"
    ports:
      - "8080:8080"
    volumes:
      - ./:/app
      - ./airflow/dags:/opt/airflow/dags
      - ./sample_data:/data
      - airflow-logs:/opt/airflow/logs
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:v2.53.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - api
      - consumer

  grafana:
    image: grafana/grafana:10.4.6
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

volumes:
  pgdata:
  minio-data:
  airflow-logs:
  grafana-data:
